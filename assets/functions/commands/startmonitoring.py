from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler


from telethon.sync import events


async def startmonitoring(update: Update, context: ContextTypes):
    client = context.user_data['client']

    if not context.user_data['monitoring']:
        @client.on(events.NewMessage(chats=list(context.user_data['groups'].keys())))
        async def msg_handler(event):
            # –ø–æ–ª—É—á–∞–µ–º –∏–º—è —é–∑–µ—Ä–∞
            sender = await event.get_sender()

            # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã
            chat_from = event.chat if event.chat else (await event.get_chat())

            if [word for word in
                context.user_data['groups'][f"@{chat_from.username}"]
                    if word.strip().lower() in event.text.lower()]:
                await update.message.reply_text(
                    f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{sender.username} –≤ –≥—Ä—É–ø–ø—É "
                    f"@{chat_from.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                    "—Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –í–æ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç:\n\n"
                    f"{event.text}"
                )

        context.user_data['monitoring'] = True

    await client.connect()
    await update.message.reply_text(
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop."
    )

    return ConversationHandler.END
